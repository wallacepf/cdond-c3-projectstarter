version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      wkfl_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name backend-<< parameters.wkfl_id >>
            aws s3 rm s3://udapeople-<< parameters.wkfl_id >> --recursive
            aws cloudformation delete-stack \
              --stack-name frontend-<< parameters.wkfl_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS = $(curl -H "token: migration_${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/output)
            if (( $SUCCESS != 1 )) ; 
            then
              cd ~/project/backend
              npm i
              npm run migrations:revert
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v1]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i 
            npm run lint
            npm run build
      - save_cache:
          paths: 
            - frontend/node_modules
            - frontend/dist
          key: frontend-build-v1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-v1]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run lint
            npm run build
      - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist
          key: backend-build-v1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v1]
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-v1]
      - run:
          name: test-backend
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v1]
      - run:
          name: scan-frontend
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-v1]
      - run:
          name: scan-backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Key=project=,Value=udcty_be_dply \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ParameterKey=ID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}  

            ec2publicip=$(aws ec2 describe-instances --filters Name=tag-value,Values=backend-6j0k5mvhp6 \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)

            curl -H "Content-Type: text/plain" -H "token: 142c2147-cc5d-42a8-895e-662a477d03da" \
              --request PUT \
              --data "${ec2publicip}" https://api.memstash.io/values/ec2publicip
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags Key=project,Value=udcty_fe_dply \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="6j0k5mvhp6" \  
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            curl -H "token: 142c2147-cc5d-42a8-895e-662a477d03da" \
              --request GET https://api.memstash.io/values/ec2publicip >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  configure-infrastructure:
    docker:
      - image: python:3.8.7
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ed:2d:cf:6b:b4:8d:26:f7:72:63:a9:dd:75:09:26:dd"
      - attach_workspace:
          at: project/.circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            pip install ansible

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook configure-server.yml -i project/.circleci/ansible/inventory.txt 
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID:0:7}        

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations >> migrations_result.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if [[ $(cat mytest.txt |grep "has been executed successfully") == *success* ]]
            then
              curl -H "Content-Type: text/plain" -H "token: migration_${CIRCLE_WORKFLOW_ID}" \
                --request PUT --data "1" https://api.memstash.io/values/output
            else
              exit 1
      - revert-migrations  

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            npm i
      - run:
          name: Get backend url
          command: |
            BACKEND_IP = $(curl -H "token: 142c2147-cc5d-42a8-895e-662a477d03da" \
              --request GET https://api.memstash.io/values/ec2publicip)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp .dist/ s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID:0:7}  
      - revert-migrations   

            
  deploy-backend:
    docker:
      - image: cimg/python:3.8.7-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ed:2d:cf:6b:b4:8d:26:f7:72:63:a9:dd:75:09:26:dd"
      - attach_workspace:
          at: project/.circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            pip install ansible
      - run:
          name: Deploy backend
          command: |
            npm i
            cd backend
            npm run build
            cp dist/* ../.circleci/ansible/rules/deploy/files
            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID:0:7}  
      - revert-migrations   

  smoke-test:
    docker:
      - image: cimg/python:3.8.7-node
    steps:
      - checkout
      - run:
          name: Get backend url
          command: |
            BACKEND_IP = $(curl -H "token: 142c2147-cc5d-42a8-895e-662a477d03da" \
              --request GET https://api.memstash.io/values/ec2publicip)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Backend smoke test.
          command: |
            if [[ $(curl -s -o /dev/null -w "%{http_code}" ${API_URL}) -eq 200 ]]
            then
              echo "200:OK"
            else
              echo "Error"
              exit 1
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Success"
              exit 0
            else
              echo "Front-End Smoke test error"
              exit 1
            fi
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID:0:7}  
      - revert-migrations 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --tags Key=project,Value=udcty_cf_dply \
                --stack-name "cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy CF on Fail
          when: on_fail
          command: |
            aws cloudformation destroy-stack --stack-name cloudfront-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          wkfl_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations  

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
                aws s3 rb s3://udapeople-${OldWorkflowID}
                aws cloudformation delete-stack \
                  --stack-name frontend-${OldWorkflowID}
                aws cloudformation delete-stack \
                  --stack-name backend-${OldWorkflowID}
              fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]